function y = perform_steerable_transform(x, Jmin,options)

% perform_steerable_transform - steerable pyramidal transform
%
%   y = perform_steerable_transform(x, Jmin,options);
%
%   This is just a convenient wrapper to the original steerable 
%   matlab toolbox of Simoncelli that can be downloaded from
%       http://www.cns.nyu.edu/~eero/STEERPYR/
%
%   It provide a simpler interface that directly output a cell
%   array of images. Usage :
%
%   M = load_image('lena');
%   MS = perform_steerable_transform(M, 3); % synthesis
%   M1 = perform_steerable_transform(MS);   % reconstruction
%
%   options.nb_orientations : number of orientation of the pyramid (1/2/4/6)
%   
%   Copyright (c) 2005 Gabriel Peyre

if nargin<3
    options.null = 0;
end
if nargin<2
    Jmin = 4;
end

if isfield(options, 'nb_orientations')
    nb_orientations = options.nb_orientations;
else
    nb_orientations = 4;    % can be 1/2/4/6
end

if nb_orientations~=1 && nb_orientations~=2 && nb_orientations~=4 && nb_orientations~=6
    error('The number of orientation should be 1,2,4 or 6.');
end


filts =  ['sp' num2str(nb_orientations-1) 'Filters'];

if ~iscell(x)
    Jmax = log2(size(x,1))-1;
    if Jmax-Jmin+1>5
        warning('Cannot construct pyramid higher than 5 levels');
        Jmin = Jmax-4;
    end
    nbr_bands = Jmax - Jmin + 1;
    % fwd transform
    [pyr,pind] = buildSpyr(x, nbr_bands, filts);
    % copy into cell array    
    y = {};
    for k=1:size(pind, 1)
        indices =  pyrBandIndices(pind,k);
        L = length(indices);    % length of this scale
        y{k} = reshape( pyr(indices), sqrt(L), sqrt(L) );
    end
else
    n = size(x{1},1);
    Jmax = log2(n)-1;
    nbr_bands = Jmax - Jmin + 1;
    % copy from cell array
    pind = n ./ 2.^(0:nbr_bands-1);
    pind = repmat(pind, nb_orientations, 1);
    pind = [pind(:), pind(:)];
    pind = [pind(1,:); pind];
    pind = [pind; pind(end,:)/2];
    % build the matrix
    n = sum( prod(pind,2) );
    pyr = zeros(n, 1);
    for k=1:size(pind, 1)
        indices =  pyrBandIndices(pind,k);
        L = length(indices);    % length of this scale
        pyr(indices) = x{k}(:);
    end
    % bwd transform
    y = reconSpyr(pyr, pind, filts); 
end



% [PYR, INDICES, STEERMTX, HARMONICS] = buildSpyr(IM, HEIGHT, FILTFILE, EDGES)
%
% Construct a steerable pyramid on matrix IM.
%
% HEIGHT (optional) specifies the number of pyramid levels to build. Default
% is maxPyrHt(size(IM),size(FILT)). 
% You can also specify 'auto' to use this value.
%
% FILTFILE (optional) should be a string referring to an m-file that
% returns the rfilters.  (examples: 'sp0Filters', 'sp1Filters',
% 'sp3Filters','sp5Filters'.  default = 'sp1Filters'). EDGES specifies
% edge-handling, and defaults to 'reflect1' (see corrDn).
%
% PYR is a vector containing the N pyramid subbands, ordered from fine
% to coarse.  INDICES is an Nx2 matrix containing the sizes of
% each subband.  This is compatible with the MatLab Wavelet toolbox.
% See the function STEER for a description of STEERMTX and HARMONICS.

% Eero Simoncelli, 6/96.
% See http://www.cis.upenn.edu/~eero/steerpyr.html for more
% information about the Steerable Pyramid image decomposition.

function [pyr,pind,steermtx,harmonics] = buildSpyr(im, ht, filtfile, edges)

%-----------------------------------------------------------------
%% DEFAULTS:

if (exist('filtfile') ~= 1)
  filtfile = 'sp1Filters';
end

if (exist('edges') ~= 1)
  edges= 'reflect1';
end

if (isstr(filtfile) & (exist(filtfile) == 2))
   [lo0filt,hi0filt,lofilt,bfilts,steermtx,harmonics] = eval(filtfile);
else
  fprintf(1,'\nUse buildSFpyr for pyramids with arbitrary numbers of orientation bands.\n');
  error('FILTFILE argument must be the name of an M-file containing SPYR filters.');
end

max_ht = maxPyrHt(size(im), size(lofilt,1));
if ( (exist('ht') ~= 1) | (ht == 'auto') )
  ht = max_ht;
else
  if (ht > max_ht)
    error(sprintf('Cannot build pyramid higher than %d levels.',max_ht));
  end
end

%-----------------------------------------------------------------

hi0 = corrDn(im, hi0filt, edges);
lo0 = corrDn(im, lo0filt, edges);

[pyr,pind] = buildSpyrLevs(lo0, ht, lofilt, bfilts, edges);

pyr = [hi0(:) ; pyr];
pind = [size(hi0); pind];
  



% [PYR, INDICES, STEERMTX, HARMONICS] = buildSFpyr(IM, HEIGHT, ORDER, TWIDTH)
%
% Construct a steerable pyramid on matrix IM, in the Fourier domain.
% This is similar to buildSpyr, except that:
%
%    + Reconstruction is exact (within floating point errors)
%    + It can produce any number of orientation bands.
%    - Typically slower, especially for non-power-of-two sizes.
%    - Boundary-handling is circular.
%
% HEIGHT (optional) specifies the number of pyramid levels to build. Default
% is maxPyrHt(size(IM),size(FILT));
%
% The squared radial functions tile the Fourier plane, with a raised-cosine
% falloff.  Angular functions are cos(theta-k\pi/(K+1))^K, where K is
% the ORDER (one less than the number of orientation bands, default= 3).
%
% TWIDTH is the width of the transition region of the radial lowpass
% function, in octaves (default = 1, which gives a raised cosine for
% the bandpass filters).
%
% PYR is a vector containing the N pyramid subbands, ordered from fine
% to coarse.  INDICES is an Nx2 matrix containing the sizes of
% each subband.  This is compatible with the MatLab Wavelet toolbox.
% See the function STEER for a description of STEERMTX and HARMONICS.

% Eero Simoncelli, 5/97.
% See http://www.cns.nyu.edu/~eero/STEERPYR/ for more
% information about the Steerable Pyramid image decomposition.

function [pyr,pind,steermtx,harmonics] = buildSFpyr(im, ht, order, twidth)

%-----------------------------------------------------------------
%% DEFAULTS:

max_ht = floor(log2(min(size(im)))) - 2;

if (exist('ht') ~= 1)
  ht = max_ht;
else
  if (ht > max_ht)
    error(sprintf('Cannot build pyramid higher than %d levels.',max_ht));
  end
end

if (exist('order') ~= 1)
  order = 3;
elseif ((order > 15)  | (order < 0))
  fprintf(1,'Warning: ORDER must be an integer in the range [0,15]. Truncating.\n');
  order = min(max(order,0),15);
else
  order = round(order);
end
nbands = order+1;

if (exist('twidth') ~= 1)
  twidth = 1;
elseif (twidth <= 0)
  fprintf(1,'Warning: TWIDTH must be positive.  Setting to 1.\n');
  twidth = 1;
end

%-----------------------------------------------------------------
%% Steering stuff:

if (mod((nbands),2) == 0)
  harmonics = [0:(nbands/2)-1]'*2 + 1;
else
  harmonics = [0:(nbands-1)/2]'*2;
end

steermtx = steer2HarmMtx(harmonics, pi*[0:nbands-1]/nbands, 'even');

%-----------------------------------------------------------------

dims = size(im);
ctr = ceil((dims+0.5)/2);

[xramp,yramp] = meshgrid( ([1:dims(2)]-ctr(2))./(dims(2)/2), ...
    ([1:dims(1)]-ctr(1))./(dims(1)/2) );
angle = atan2(yramp,xramp);
log_rad = sqrt(xramp.^2 + yramp.^2);
log_rad(ctr(1),ctr(2)) =  log_rad(ctr(1),ctr(2)-1);
log_rad  = log2(log_rad);

%% Radial transition function (a raised cosine in log-frequency):
[Xrcos,Yrcos] = rcosFn(twidth,(-twidth/2),[0 1]);
Yrcos = sqrt(Yrcos);

YIrcos = sqrt(1.0 - Yrcos.^2);
lo0mask = pointOp(log_rad, YIrcos, Xrcos(1), Xrcos(2)-Xrcos(1), 0);
imdft = fftshift(fft2(im));
lo0dft =  imdft .* lo0mask;

[pyr,pind] = buildSFpyrLevs(lo0dft, log_rad, Xrcos, Yrcos, angle, ht, nbands);

hi0mask = pointOp(log_rad, Yrcos, Xrcos(1), Xrcos(2)-Xrcos(1), 0);
hi0dft =  imdft .* hi0mask;
hi0 = ifft2(ifftshift(hi0dft));

pyr = [real(hi0(:)) ; pyr];
pind = [size(hi0); pind];



% Steerable pyramid filters.  Transform described  in:
%
% @INPROCEEDINGS{Simoncelli95b,
%	TITLE = "The Steerable Pyramid: A Flexible Architecture for
%		 Multi-Scale Derivative Computation",
%	AUTHOR = "E P Simoncelli and W T Freeman",
%	BOOKTITLE = "Second Int'l Conf on Image Processing",
%	ADDRESS = "Washington, DC", MONTH = "October", YEAR = 1995 }
%
% Filter kernel design described in:
%
%@INPROCEEDINGS{Karasaridis96,
%	TITLE = "A Filter Design Technique for 
%		Steerable Pyramid Image Transforms",
%	AUTHOR = "A Karasaridis and E P Simoncelli",
%	BOOKTITLE = "ICASSP",	ADDRESS = "Atlanta, GA",
%	MONTH = "May",	YEAR = 1996 }

% Eero Simoncelli, 6/96.

function [lo0filt,hi0filt,lofilt,bfilts,mtx,harmonics] = sp0Filters();

harmonics = [ 0 ];

lo0filt = [ ...
-4.514000e-04 -1.137100e-04 -3.725800e-04 -3.743860e-03 -3.725800e-04 -1.137100e-04 -4.514000e-04
-1.137100e-04 -6.119520e-03 -1.344160e-02 -7.563200e-03 -1.344160e-02 -6.119520e-03 -1.137100e-04
-3.725800e-04 -1.344160e-02 6.441488e-02 1.524935e-01 6.441488e-02 -1.344160e-02 -3.725800e-04 
-3.743860e-03 -7.563200e-03 1.524935e-01 3.153017e-01 1.524935e-01 -7.563200e-03 -3.743860e-03 
-3.725800e-04 -1.344160e-02 6.441488e-02 1.524935e-01 6.441488e-02 -1.344160e-02 -3.725800e-04 
-1.137100e-04 -6.119520e-03 -1.344160e-02 -7.563200e-03 -1.344160e-02 -6.119520e-03 -1.137100e-04 
-4.514000e-04 -1.137100e-04 -3.725800e-04 -3.743860e-03 -3.725800e-04 -1.137100e-04 -4.514000e-04];

lofilt = [ ...
-2.257000e-04 -8.064400e-04 -5.686000e-05 8.741400e-04 -1.862800e-04 -1.031640e-03 -1.871920e-03 -1.031640e-03 -1.862800e-04 8.741400e-04 -5.686000e-05 -8.064400e-04 -2.257000e-04 
-8.064400e-04 1.417620e-03 -1.903800e-04 -2.449060e-03 -4.596420e-03 -7.006740e-03 -6.948900e-03 -7.006740e-03 -4.596420e-03 -2.449060e-03 -1.903800e-04 1.417620e-03 -8.064400e-04 
-5.686000e-05 -1.903800e-04 -3.059760e-03 -6.401000e-03 -6.720800e-03 -5.236180e-03 -3.781600e-03 -5.236180e-03 -6.720800e-03 -6.401000e-03 -3.059760e-03 -1.903800e-04 -5.686000e-05 
8.741400e-04 -2.449060e-03 -6.401000e-03 -5.260020e-03 3.938620e-03 1.722078e-02 2.449600e-02 1.722078e-02 3.938620e-03 -5.260020e-03 -6.401000e-03 -2.449060e-03 8.741400e-04 
-1.862800e-04 -4.596420e-03 -6.720800e-03 3.938620e-03 3.220744e-02 6.306262e-02 7.624674e-02 6.306262e-02 3.220744e-02 3.938620e-03 -6.720800e-03 -4.596420e-03 -1.862800e-04 
-1.031640e-03 -7.006740e-03 -5.236180e-03 1.722078e-02 6.306262e-02 1.116388e-01 1.348999e-01 1.116388e-01 6.306262e-02 1.722078e-02 -5.236180e-03 -7.006740e-03 -1.031640e-03 
-1.871920e-03 -6.948900e-03 -3.781600e-03 2.449600e-02 7.624674e-02 1.348999e-01 1.576508e-01 1.348999e-01 7.624674e-02 2.449600e-02 -3.781600e-03 -6.948900e-03 -1.871920e-03 
-1.031640e-03 -7.006740e-03 -5.236180e-03 1.722078e-02 6.306262e-02 1.116388e-01 1.348999e-01 1.116388e-01 6.306262e-02 1.722078e-02 -5.236180e-03 -7.006740e-03 -1.031640e-03 
-1.862800e-04 -4.596420e-03 -6.720800e-03 3.938620e-03 3.220744e-02 6.306262e-02 7.624674e-02 6.306262e-02 3.220744e-02 3.938620e-03 -6.720800e-03 -4.596420e-03 -1.862800e-04
8.741400e-04 -2.449060e-03 -6.401000e-03 -5.260020e-03 3.938620e-03 1.722078e-02 2.449600e-02 1.722078e-02 3.938620e-03 -5.260020e-03 -6.401000e-03 -2.449060e-03 8.741400e-04 
-5.686000e-05 -1.903800e-04 -3.059760e-03 -6.401000e-03 -6.720800e-03 -5.236180e-03 -3.781600e-03 -5.236180e-03 -6.720800e-03 -6.401000e-03 -3.059760e-03 -1.903800e-04 -5.686000e-05 
-8.064400e-04 1.417620e-03 -1.903800e-04 -2.449060e-03 -4.596420e-03 -7.006740e-03 -6.948900e-03 -7.006740e-03 -4.596420e-03 -2.449060e-03 -1.903800e-04 1.417620e-03 -8.064400e-04 
-2.257000e-04 -8.064400e-04 -5.686000e-05 8.741400e-04 -1.862800e-04 -1.031640e-03 -1.871920e-03 -1.031640e-03 -1.862800e-04 8.741400e-04 -5.686000e-05 -8.064400e-04 -2.257000e-04]; 

mtx = [ 1.000000 ];

hi0filt = [...
5.997200e-04 -6.068000e-05 -3.324900e-04 -3.325600e-04 -2.406600e-04 -3.325600e-04 -3.324900e-04 -6.068000e-05 5.997200e-04
-6.068000e-05 1.263100e-04 4.927100e-04 1.459700e-04 -3.732100e-04 1.459700e-04 4.927100e-04 1.263100e-04 -6.068000e-05 
-3.324900e-04 4.927100e-04 -1.616650e-03 -1.437358e-02 -2.420138e-02 -1.437358e-02 -1.616650e-03 4.927100e-04 -3.324900e-04 
-3.325600e-04 1.459700e-04 -1.437358e-02 -6.300923e-02 -9.623594e-02 -6.300923e-02 -1.437358e-02 1.459700e-04 -3.325600e-04 
-2.406600e-04 -3.732100e-04 -2.420138e-02 -9.623594e-02 8.554893e-01 -9.623594e-02 -2.420138e-02 -3.732100e-04 -2.406600e-04 
-3.325600e-04 1.459700e-04 -1.437358e-02 -6.300923e-02 -9.623594e-02 -6.300923e-02 -1.437358e-02 1.459700e-04 -3.325600e-04 
-3.324900e-04 4.927100e-04 -1.616650e-03 -1.437358e-02 -2.420138e-02 -1.437358e-02 -1.616650e-03 4.927100e-04 -3.324900e-04 
-6.068000e-05 1.263100e-04 4.927100e-04 1.459700e-04 -3.732100e-04 1.459700e-04 4.927100e-04 1.263100e-04 -6.068000e-05 
5.997200e-04 -6.068000e-05 -3.324900e-04 -3.325600e-04 -2.406600e-04 -3.325600e-04 -3.324900e-04 -6.068000e-05 5.997200e-04 ];

bfilts = [ ...
-9.066000e-05 -1.738640e-03 -4.942500e-03 -7.889390e-03 -1.009473e-02 -7.889390e-03 -4.942500e-03 -1.738640e-03 -9.066000e-05 ...
-1.738640e-03 -4.625150e-03 -7.272540e-03 -7.623410e-03 -9.091950e-03 -7.623410e-03 -7.272540e-03 -4.625150e-03 -1.738640e-03 ...
-4.942500e-03 -7.272540e-03 -2.129540e-02 -2.435662e-02 -3.487008e-02 -2.435662e-02 -2.129540e-02 -7.272540e-03 -4.942500e-03  ...
-7.889390e-03 -7.623410e-03 -2.435662e-02 -1.730466e-02 -3.158605e-02 -1.730466e-02 -2.435662e-02 -7.623410e-03 -7.889390e-03  ...
-1.009473e-02 -9.091950e-03 -3.487008e-02 -3.158605e-02 9.464195e-01 -3.158605e-02 -3.487008e-02 -9.091950e-03 -1.009473e-02  ...
-7.889390e-03 -7.623410e-03 -2.435662e-02 -1.730466e-02 -3.158605e-02 -1.730466e-02 -2.435662e-02 -7.623410e-03 -7.889390e-03 ...
-4.942500e-03 -7.272540e-03 -2.129540e-02 -2.435662e-02 -3.487008e-02 -2.435662e-02 -2.129540e-02 -7.272540e-03 -4.942500e-03  ...
-1.738640e-03 -4.625150e-03 -7.272540e-03 -7.623410e-03 -9.091950e-03 -7.623410e-03 -7.272540e-03 -4.625150e-03 -1.738640e-03  ...
-9.066000e-05 -1.738640e-03 -4.942500e-03 -7.889390e-03 -1.009473e-02 -7.889390e-03 -4.942500e-03 -1.738640e-03 -9.066000e-05 ]';



% Steerable pyramid filters.  Transform described  in:
%
% @INPROCEEDINGS{Simoncelli95b,
%	TITLE = "The Steerable Pyramid: A Flexible Architecture for
%		 Multi-Scale Derivative Computation",
%	AUTHOR = "E P Simoncelli and W T Freeman",
%	BOOKTITLE = "Second Int'l Conf on Image Processing",
%	ADDRESS = "Washington, DC", MONTH = "October", YEAR = 1995 }
%
% Filter kernel design described in:
%
%@INPROCEEDINGS{Karasaridis96,
%	TITLE = "A Filter Design Technique for 
%		Steerable Pyramid Image Transforms",
%	AUTHOR = "A Karasaridis and E P Simoncelli",
%	BOOKTITLE = "ICASSP",	ADDRESS = "Atlanta, GA",
%	MONTH = "May",	YEAR = 1996 }

% Eero Simoncelli, 6/96.

function [lo0filt,hi0filt,lofilt,bfilts,mtx,harmonics] = sp1Filters();

harmonics = [ 1 ];

%% filters only contain first harmonic.
mtx = eye(2);

lo0filt = [ ...
-8.701000e-05 -1.354280e-03 -1.601260e-03 -5.033700e-04 2.524010e-03 -5.033700e-04 -1.601260e-03 -1.354280e-03 -8.701000e-05
-1.354280e-03 2.921580e-03 7.522720e-03 8.224420e-03 1.107620e-03 8.224420e-03 7.522720e-03 2.921580e-03 -1.354280e-03 
-1.601260e-03 7.522720e-03 -7.061290e-03 -3.769487e-02 -3.297137e-02 -3.769487e-02 -7.061290e-03 7.522720e-03 -1.601260e-03  
-5.033700e-04 8.224420e-03 -3.769487e-02 4.381320e-02 1.811603e-01 4.381320e-02 -3.769487e-02 8.224420e-03 -5.033700e-04 
2.524010e-03 1.107620e-03 -3.297137e-02 1.811603e-01 4.376250e-01 1.811603e-01 -3.297137e-02 1.107620e-03 2.524010e-03  
-5.033700e-04 8.224420e-03 -3.769487e-02 4.381320e-02 1.811603e-01 4.381320e-02 -3.769487e-02 8.224420e-03 -5.033700e-04  
-1.601260e-03 7.522720e-03 -7.061290e-03 -3.769487e-02 -3.297137e-02 -3.769487e-02 -7.061290e-03 7.522720e-03 -1.601260e-03  
-1.354280e-03 2.921580e-03 7.522720e-03 8.224420e-03 1.107620e-03 8.224420e-03 7.522720e-03 2.921580e-03 -1.354280e-03  
-8.701000e-05 -1.354280e-03 -1.601260e-03 -5.033700e-04 2.524010e-03 -5.033700e-04 -1.601260e-03 -1.354280e-03 -8.701000e-05 
];

lofilt = [ ...
-4.350000e-05 1.207800e-04 -6.771400e-04 -1.243400e-04 -8.006400e-04 -1.597040e-03 -2.516800e-04 -4.202000e-04 1.262000e-03 -4.202000e-04 -2.516800e-04 -1.597040e-03 -8.006400e-04 -1.243400e-04 -6.771400e-04 1.207800e-04 -4.350000e-05  ; ...
1.207800e-04 4.460600e-04 -5.814600e-04 5.621600e-04 -1.368800e-04 2.325540e-03 2.889860e-03 4.287280e-03 5.589400e-03 4.287280e-03 2.889860e-03 2.325540e-03 -1.368800e-04 5.621600e-04 -5.814600e-04 4.460600e-04 1.207800e-04  ; ...
-6.771400e-04 -5.814600e-04 1.460780e-03 2.160540e-03 3.761360e-03 3.080980e-03 4.112200e-03 2.221220e-03 5.538200e-04 2.221220e-03 4.112200e-03 3.080980e-03 3.761360e-03 2.160540e-03 1.460780e-03 -5.814600e-04 -6.771400e-04  ; ...
-1.243400e-04 5.621600e-04 2.160540e-03 3.175780e-03 3.184680e-03 -1.777480e-03 -7.431700e-03 -9.056920e-03 -9.637220e-03 -9.056920e-03 -7.431700e-03 -1.777480e-03 3.184680e-03 3.175780e-03 2.160540e-03 5.621600e-04 -1.243400e-04  ; ...
-8.006400e-04 -1.368800e-04 3.761360e-03 3.184680e-03 -3.530640e-03 -1.260420e-02 -1.884744e-02 -1.750818e-02 -1.648568e-02 -1.750818e-02 -1.884744e-02 -1.260420e-02 -3.530640e-03 3.184680e-03 3.761360e-03 -1.368800e-04 -8.006400e-04  ; ...
-1.597040e-03 2.325540e-03 3.080980e-03 -1.777480e-03 -1.260420e-02 -2.022938e-02 -1.109170e-02 3.955660e-03 1.438512e-02 3.955660e-03 -1.109170e-02 -2.022938e-02 -1.260420e-02 -1.777480e-03 3.080980e-03 2.325540e-03 -1.597040e-03  ; ...
-2.516800e-04 2.889860e-03 4.112200e-03 -7.431700e-03 -1.884744e-02 -1.109170e-02 2.190660e-02 6.806584e-02 9.058014e-02 6.806584e-02 2.190660e-02 -1.109170e-02 -1.884744e-02 -7.431700e-03 4.112200e-03 2.889860e-03 -2.516800e-04  ; ...
-4.202000e-04 4.287280e-03 2.221220e-03 -9.056920e-03 -1.750818e-02 3.955660e-03 6.806584e-02 1.445500e-01 1.773651e-01 1.445500e-01 6.806584e-02 3.955660e-03 -1.750818e-02 -9.056920e-03 2.221220e-03 4.287280e-03 -4.202000e-04  ; ...
1.262000e-03 5.589400e-03 5.538200e-04 -9.637220e-03 -1.648568e-02 1.438512e-02 9.058014e-02 1.773651e-01 2.120374e-01 1.773651e-01 9.058014e-02 1.438512e-02 -1.648568e-02 -9.637220e-03 5.538200e-04 5.589400e-03 1.262000e-03  ; ...
-4.202000e-04 4.287280e-03 2.221220e-03 -9.056920e-03 -1.750818e-02 3.955660e-03 6.806584e-02 1.445500e-01 1.773651e-01 1.445500e-01 6.806584e-02 3.955660e-03 -1.750818e-02 -9.056920e-03 2.221220e-03 4.287280e-03 -4.202000e-04  ; ...
-2.516800e-04 2.889860e-03 4.112200e-03 -7.431700e-03 -1.884744e-02 -1.109170e-02 2.190660e-02 6.806584e-02 9.058014e-02 6.806584e-02 2.190660e-02 -1.109170e-02 -1.884744e-02 -7.431700e-03 4.112200e-03 2.889860e-03 -2.516800e-04  ; ...
-1.597040e-03 2.325540e-03 3.080980e-03 -1.777480e-03 -1.260420e-02 -2.022938e-02 -1.109170e-02 3.955660e-03 1.438512e-02 3.955660e-03 -1.109170e-02 -2.022938e-02 -1.260420e-02 -1.777480e-03 3.080980e-03 2.325540e-03 -1.597040e-03  ; ...
-8.006400e-04 -1.368800e-04 3.761360e-03 3.184680e-03 -3.530640e-03 -1.260420e-02 -1.884744e-02 -1.750818e-02 -1.648568e-02 -1.750818e-02 -1.884744e-02 -1.260420e-02 -3.530640e-03 3.184680e-03 3.761360e-03 -1.368800e-04 -8.006400e-04  ; ...
-1.243400e-04 5.621600e-04 2.160540e-03 3.175780e-03 3.184680e-03 -1.777480e-03 -7.431700e-03 -9.056920e-03 -9.637220e-03 -9.056920e-03 -7.431700e-03 -1.777480e-03 3.184680e-03 3.175780e-03 2.160540e-03 5.621600e-04 -1.243400e-04  ; ...
-6.771400e-04 -5.814600e-04 1.460780e-03 2.160540e-03 3.761360e-03 3.080980e-03 4.112200e-03 2.221220e-03 5.538200e-04 2.221220e-03 4.112200e-03 3.080980e-03 3.761360e-03 2.160540e-03 1.460780e-03 -5.814600e-04 -6.771400e-04  ; ...
1.207800e-04 4.460600e-04 -5.814600e-04 5.621600e-04 -1.368800e-04 2.325540e-03 2.889860e-03 4.287280e-03 5.589400e-03 4.287280e-03 2.889860e-03 2.325540e-03 -1.368800e-04 5.621600e-04 -5.814600e-04 4.460600e-04 1.207800e-04  ; ...
-4.350000e-05 1.207800e-04 -6.771400e-04 -1.243400e-04 -8.006400e-04 -1.597040e-03 -2.516800e-04 -4.202000e-04 1.262000e-03 -4.202000e-04 -2.516800e-04 -1.597040e-03 -8.006400e-04 -1.243400e-04 -6.771400e-04 1.207800e-04 -4.350000e-05 ];

hi0filt = [...
-9.570000e-04 -2.424100e-04 -1.424720e-03 -8.742600e-04 -1.166810e-03 -8.742600e-04 -1.424720e-03 -2.424100e-04 -9.570000e-04 ; ...
-2.424100e-04 -4.317530e-03 8.998600e-04 9.156420e-03 1.098012e-02 9.156420e-03 8.998600e-04 -4.317530e-03 -2.424100e-04  ; ...
-1.424720e-03 8.998600e-04 1.706347e-02 1.094866e-02 -5.897780e-03 1.094866e-02 1.706347e-02 8.998600e-04 -1.424720e-03  ; ...
-8.742600e-04 9.156420e-03 1.094866e-02 -7.841370e-02 -1.562827e-01 -7.841370e-02 1.094866e-02 9.156420e-03 -8.742600e-04  ; ...
-1.166810e-03 1.098012e-02 -5.897780e-03 -1.562827e-01 7.282593e-01 -1.562827e-01 -5.897780e-03 1.098012e-02 -1.166810e-03  ; ...
-8.742600e-04 9.156420e-03 1.094866e-02 -7.841370e-02 -1.562827e-01 -7.841370e-02 1.094866e-02 9.156420e-03 -8.742600e-04  ; ...
-1.424720e-03 8.998600e-04 1.706347e-02 1.094866e-02 -5.897780e-03 1.094866e-02 1.706347e-02 8.998600e-04 -1.424720e-03  ; ...
-2.424100e-04 -4.317530e-03 8.998600e-04 9.156420e-03 1.098012e-02 9.156420e-03 8.998600e-04 -4.317530e-03 -2.424100e-04  ; ...
-9.570000e-04 -2.424100e-04 -1.424720e-03 -8.742600e-04 -1.166810e-03 -8.742600e-04 -1.424720e-03 -2.424100e-04 -9.570000e-04 ];

bfilts = -[ ...
6.125880e-03 -8.052600e-03 -2.103714e-02 -1.536890e-02 -1.851466e-02 -1.536890e-02 -2.103714e-02 -8.052600e-03 6.125880e-03  ...
-1.287416e-02 -9.611520e-03 1.023569e-02 6.009450e-03 1.872620e-03 6.009450e-03 1.023569e-02 -9.611520e-03 -1.287416e-02  ...
-5.641530e-03 4.168400e-03 -2.382180e-02 -5.375324e-02 -2.076086e-02 -5.375324e-02 -2.382180e-02 4.168400e-03 -5.641530e-03  ...
-8.957260e-03 -1.751170e-03 -1.836909e-02 1.265655e-01 2.996168e-01 1.265655e-01 -1.836909e-02 -1.751170e-03 -8.957260e-03  ...
0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00  ...
8.957260e-03 1.751170e-03 1.836909e-02 -1.265655e-01 -2.996168e-01 -1.265655e-01 1.836909e-02 1.751170e-03 8.957260e-03  ...
5.641530e-03 -4.168400e-03 2.382180e-02 5.375324e-02 2.076086e-02 5.375324e-02 2.382180e-02 -4.168400e-03 5.641530e-03  ...
1.287416e-02 9.611520e-03 -1.023569e-02 -6.009450e-03 -1.872620e-03 -6.009450e-03 -1.023569e-02 9.611520e-03 1.287416e-02  ...
-6.125880e-03 8.052600e-03 2.103714e-02 1.536890e-02 1.851466e-02 1.536890e-02 2.103714e-02 8.052600e-03 -6.125880e-03; ...
...
-6.125880e-03 1.287416e-02 5.641530e-03 8.957260e-03 0.000000e+00 -8.957260e-03 -5.641530e-03 -1.287416e-02 6.125880e-03  ...
8.052600e-03 9.611520e-03 -4.168400e-03 1.751170e-03 0.000000e+00 -1.751170e-03 4.168400e-03 -9.611520e-03 -8.052600e-03  ...
2.103714e-02 -1.023569e-02 2.382180e-02 1.836909e-02 0.000000e+00 -1.836909e-02 -2.382180e-02 1.023569e-02 -2.103714e-02  ...
1.536890e-02 -6.009450e-03 5.375324e-02 -1.265655e-01 0.000000e+00 1.265655e-01 -5.375324e-02 6.009450e-03 -1.536890e-02  ...
1.851466e-02 -1.872620e-03 2.076086e-02 -2.996168e-01 0.000000e+00 2.996168e-01 -2.076086e-02 1.872620e-03 -1.851466e-02  ...
1.536890e-02 -6.009450e-03 5.375324e-02 -1.265655e-01 0.000000e+00 1.265655e-01 -5.375324e-02 6.009450e-03 -1.536890e-02  ...
2.103714e-02 -1.023569e-02 2.382180e-02 1.836909e-02 0.000000e+00 -1.836909e-02 -2.382180e-02 1.023569e-02 -2.103714e-02  ...
8.052600e-03 9.611520e-03 -4.168400e-03 1.751170e-03 0.000000e+00 -1.751170e-03 4.168400e-03 -9.611520e-03 -8.052600e-03  ...
-6.125880e-03 1.287416e-02 5.641530e-03 8.957260e-03 0.000000e+00 -8.957260e-03 -5.641530e-03 -1.287416e-02 6.125880e-03 ...
]';



% Steerable pyramid filters.  Transform described  in:
%
% @INPROCEEDINGS{Simoncelli95b,
%	TITLE = "The Steerable Pyramid: A Flexible Architecture for
%		 Multi-Scale Derivative Computation",
%	AUTHOR = "E P Simoncelli and W T Freeman",
%	BOOKTITLE = "Second Int'l Conf on Image Processing",
%	ADDRESS = "Washington, DC", MONTH = "October", YEAR = 1995 }
%
% Filter kernel design described in:
%
%@INPROCEEDINGS{Karasaridis96,
%	TITLE = "A Filter Design Technique for 
%		Steerable Pyramid Image Transforms",
%	AUTHOR = "A Karasaridis and E P Simoncelli",
%	BOOKTITLE = "ICASSP",	ADDRESS = "Atlanta, GA",
%	MONTH = "May",	YEAR = 1996 }

% Eero Simoncelli, 6/96.

function [lo0filt,hi0filt,lofilt,bfilts,mtx,harmonics] = sp3Filters();

harmonics = [1 3];

mtx = [ ...
    0.5000    0.3536         0   -0.3536
   -0.0000    0.3536    0.5000    0.3536
    0.5000   -0.3536         0    0.3536
   -0.0000    0.3536   -0.5000    0.3536];

hi0filt = [ 
-4.0483998600E-4  -6.2596000498E-4  -3.7829999201E-5  8.8387000142E-4  1.5450799838E-3  1.9235999789E-3  2.0687500946E-3  2.0898699295E-3  2.0687500946E-3  1.9235999789E-3  1.5450799838E-3  8.8387000142E-4  -3.7829999201E-5  -6.2596000498E-4  -4.0483998600E-4
-6.2596000498E-4  -3.2734998967E-4  7.7435001731E-4  1.5874400269E-3  2.1750701126E-3  2.5626500137E-3  2.2892199922E-3  1.9755100366E-3  2.2892199922E-3  2.5626500137E-3  2.1750701126E-3  1.5874400269E-3  7.7435001731E-4  -3.2734998967E-4  -6.2596000498E-4
-3.7829999201E-5  7.7435001731E-4  1.1793200392E-3  1.4050999889E-3  2.2253401112E-3  2.1145299543E-3  3.3578000148E-4  -8.3368999185E-4  3.3578000148E-4  2.1145299543E-3  2.2253401112E-3  1.4050999889E-3  1.1793200392E-3  7.7435001731E-4  -3.7829999201E-5
8.8387000142E-4  1.5874400269E-3  1.4050999889E-3  1.2960999738E-3  -4.9274001503E-4  -3.1295299996E-3  -4.5751798898E-3  -5.1014497876E-3  -4.5751798898E-3  -3.1295299996E-3  -4.9274001503E-4  1.2960999738E-3  1.4050999889E-3  1.5874400269E-3  8.8387000142E-4
1.5450799838E-3  2.1750701126E-3  2.2253401112E-3  -4.9274001503E-4  -6.3222697936E-3  -2.7556000277E-3  5.3632198833E-3  7.3032598011E-3  5.3632198833E-3  -2.7556000277E-3  -6.3222697936E-3  -4.9274001503E-4  2.2253401112E-3  2.1750701126E-3  1.5450799838E-3
1.9235999789E-3  2.5626500137E-3  2.1145299543E-3  -3.1295299996E-3  -2.7556000277E-3  1.3962360099E-2  7.8046298586E-3  -9.3812197447E-3  7.8046298586E-3  1.3962360099E-2  -2.7556000277E-3  -3.1295299996E-3  2.1145299543E-3  2.5626500137E-3  1.9235999789E-3
2.0687500946E-3  2.2892199922E-3  3.3578000148E-4  -4.5751798898E-3  5.3632198833E-3  7.8046298586E-3  -7.9501636326E-2  -0.1554141641      -7.9501636326E-2  7.8046298586E-3  5.3632198833E-3  -4.5751798898E-3  3.3578000148E-4  2.2892199922E-3  2.0687500946E-3
2.0898699295E-3  1.9755100366E-3  -8.3368999185E-4  -5.1014497876E-3  7.3032598011E-3  -9.3812197447E-3  -0.1554141641      0.7303866148      -0.1554141641      -9.3812197447E-3  7.3032598011E-3  -5.1014497876E-3  -8.3368999185E-4  1.9755100366E-3  2.0898699295E-3
2.0687500946E-3  2.2892199922E-3  3.3578000148E-4  -4.5751798898E-3  5.3632198833E-3  7.8046298586E-3  -7.9501636326E-2  -0.1554141641      -7.9501636326E-2  7.8046298586E-3  5.3632198833E-3  -4.5751798898E-3  3.3578000148E-4  2.2892199922E-3  2.0687500946E-3
1.9235999789E-3  2.5626500137E-3  2.1145299543E-3  -3.1295299996E-3  -2.7556000277E-3  1.3962360099E-2  7.8046298586E-3  -9.3812197447E-3  7.8046298586E-3  1.3962360099E-2  -2.7556000277E-3  -3.1295299996E-3  2.1145299543E-3  2.5626500137E-3  1.9235999789E-3
1.5450799838E-3  2.1750701126E-3  2.2253401112E-3  -4.9274001503E-4  -6.3222697936E-3  -2.7556000277E-3  5.3632198833E-3  7.3032598011E-3  5.3632198833E-3  -2.7556000277E-3  -6.3222697936E-3  -4.9274001503E-4  2.2253401112E-3  2.1750701126E-3  1.5450799838E-3
8.8387000142E-4  1.5874400269E-3  1.4050999889E-3  1.2960999738E-3  -4.9274001503E-4  -3.1295299996E-3  -4.5751798898E-3  -5.1014497876E-3  -4.5751798898E-3  -3.1295299996E-3  -4.9274001503E-4  1.2960999738E-3  1.4050999889E-3  1.5874400269E-3  8.8387000142E-4
-3.7829999201E-5  7.7435001731E-4  1.1793200392E-3  1.4050999889E-3  2.2253401112E-3  2.1145299543E-3  3.3578000148E-4  -8.3368999185E-4  3.3578000148E-4  2.1145299543E-3  2.2253401112E-3  1.4050999889E-3  1.1793200392E-3  7.7435001731E-4  -3.7829999201E-5
-6.2596000498E-4  -3.2734998967E-4  7.7435001731E-4  1.5874400269E-3  2.1750701126E-3  2.5626500137E-3  2.2892199922E-3  1.9755100366E-3  2.2892199922E-3  2.5626500137E-3  2.1750701126E-3  1.5874400269E-3  7.7435001731E-4  -3.2734998967E-4  -6.2596000498E-4
-4.0483998600E-4  -6.2596000498E-4  -3.7829999201E-5  8.8387000142E-4  1.5450799838E-3  1.9235999789E-3  2.0687500946E-3  2.0898699295E-3  2.0687500946E-3  1.9235999789E-3  1.5450799838E-3  8.8387000142E-4  -3.7829999201E-5  -6.2596000498E-4  -4.0483998600E-4
];

lo0filt = [
-8.7009997515E-5  -1.3542800443E-3  -1.6012600390E-3  -5.0337001448E-4  2.5240099058E-3  -5.0337001448E-4  -1.6012600390E-3  -1.3542800443E-3  -8.7009997515E-5
-1.3542800443E-3  2.9215801042E-3  7.5227199122E-3  8.2244202495E-3  1.1076199589E-3  8.2244202495E-3  7.5227199122E-3  2.9215801042E-3  -1.3542800443E-3
-1.6012600390E-3  7.5227199122E-3  -7.0612900890E-3  -3.7694871426E-2  -3.2971370965E-2  -3.7694871426E-2  -7.0612900890E-3  7.5227199122E-3  -1.6012600390E-3
-5.0337001448E-4  8.2244202495E-3  -3.7694871426E-2  4.3813198805E-2  0.1811603010      4.3813198805E-2  -3.7694871426E-2  8.2244202495E-3  -5.0337001448E-4
2.5240099058E-3  1.1076199589E-3  -3.2971370965E-2  0.1811603010      0.4376249909      0.1811603010      -3.2971370965E-2  1.1076199589E-3  2.5240099058E-3
-5.0337001448E-4  8.2244202495E-3  -3.7694871426E-2  4.3813198805E-2  0.1811603010      4.3813198805E-2  -3.7694871426E-2  8.2244202495E-3  -5.0337001448E-4
-1.6012600390E-3  7.5227199122E-3  -7.0612900890E-3  -3.7694871426E-2  -3.2971370965E-2  -3.7694871426E-2  -7.0612900890E-3  7.5227199122E-3  -1.6012600390E-3
-1.3542800443E-3  2.9215801042E-3  7.5227199122E-3  8.2244202495E-3  1.1076199589E-3  8.2244202495E-3  7.5227199122E-3  2.9215801042E-3  -1.3542800443E-3
-8.7009997515E-5  -1.3542800443E-3  -1.6012600390E-3  -5.0337001448E-4  2.5240099058E-3  -5.0337001448E-4  -1.6012600390E-3  -1.3542800443E-3  -8.7009997515E-5
];

lofilt = [
-4.3500000174E-5  1.2078000145E-4  -6.7714002216E-4  -1.2434000382E-4  -8.0063997302E-4  -1.5970399836E-3  -2.5168000138E-4  -4.2019999819E-4  1.2619999470E-3  -4.2019999819E-4  -2.5168000138E-4  -1.5970399836E-3  -8.0063997302E-4  -1.2434000382E-4  -6.7714002216E-4  1.2078000145E-4  -4.3500000174E-5
1.2078000145E-4  4.4606000301E-4  -5.8146001538E-4  5.6215998484E-4  -1.3688000035E-4  2.3255399428E-3  2.8898599558E-3  4.2872801423E-3  5.5893999524E-3  4.2872801423E-3  2.8898599558E-3  2.3255399428E-3  -1.3688000035E-4  5.6215998484E-4  -5.8146001538E-4  4.4606000301E-4  1.2078000145E-4
-6.7714002216E-4  -5.8146001538E-4  1.4607800404E-3  2.1605400834E-3  3.7613599561E-3  3.0809799209E-3  4.1121998802E-3  2.2212199401E-3  5.5381999118E-4  2.2212199401E-3  4.1121998802E-3  3.0809799209E-3  3.7613599561E-3  2.1605400834E-3  1.4607800404E-3  -5.8146001538E-4  -6.7714002216E-4
-1.2434000382E-4  5.6215998484E-4  2.1605400834E-3  3.1757799443E-3  3.1846798956E-3  -1.7774800071E-3  -7.4316998944E-3  -9.0569201857E-3  -9.6372198313E-3  -9.0569201857E-3  -7.4316998944E-3  -1.7774800071E-3  3.1846798956E-3  3.1757799443E-3  2.1605400834E-3  5.6215998484E-4  -1.2434000382E-4
-8.0063997302E-4  -1.3688000035E-4  3.7613599561E-3  3.1846798956E-3  -3.5306399222E-3  -1.2604200281E-2  -1.8847439438E-2  -1.7508180812E-2  -1.6485679895E-2  -1.7508180812E-2  -1.8847439438E-2  -1.2604200281E-2  -3.5306399222E-3  3.1846798956E-3  3.7613599561E-3  -1.3688000035E-4  -8.0063997302E-4
-1.5970399836E-3  2.3255399428E-3  3.0809799209E-3  -1.7774800071E-3  -1.2604200281E-2  -2.0229380578E-2  -1.1091699824E-2  3.9556599222E-3  1.4385120012E-2  3.9556599222E-3  -1.1091699824E-2  -2.0229380578E-2  -1.2604200281E-2  -1.7774800071E-3  3.0809799209E-3  2.3255399428E-3  -1.5970399836E-3
-2.5168000138E-4  2.8898599558E-3  4.1121998802E-3  -7.4316998944E-3  -1.8847439438E-2  -1.1091699824E-2  2.1906599402E-2  6.8065837026E-2  9.0580143034E-2  6.8065837026E-2  2.1906599402E-2  -1.1091699824E-2  -1.8847439438E-2  -7.4316998944E-3  4.1121998802E-3  2.8898599558E-3  -2.5168000138E-4
-4.2019999819E-4  4.2872801423E-3  2.2212199401E-3  -9.0569201857E-3  -1.7508180812E-2  3.9556599222E-3  6.8065837026E-2  0.1445499808      0.1773651242      0.1445499808      6.8065837026E-2  3.9556599222E-3  -1.7508180812E-2  -9.0569201857E-3  2.2212199401E-3  4.2872801423E-3  -4.2019999819E-4
1.2619999470E-3  5.5893999524E-3  5.5381999118E-4  -9.6372198313E-3  -1.6485679895E-2  1.4385120012E-2  9.0580143034E-2  0.1773651242      0.2120374441      0.1773651242      9.0580143034E-2  1.4385120012E-2  -1.6485679895E-2  -9.6372198313E-3  5.5381999118E-4  5.5893999524E-3  1.2619999470E-3
-4.2019999819E-4  4.2872801423E-3  2.2212199401E-3  -9.0569201857E-3  -1.7508180812E-2  3.9556599222E-3  6.8065837026E-2  0.1445499808      0.1773651242      0.1445499808      6.8065837026E-2  3.9556599222E-3  -1.7508180812E-2  -9.0569201857E-3  2.2212199401E-3  4.2872801423E-3  -4.2019999819E-4
-2.5168000138E-4  2.8898599558E-3  4.1121998802E-3  -7.4316998944E-3  -1.8847439438E-2  -1.1091699824E-2  2.1906599402E-2  6.8065837026E-2  9.0580143034E-2  6.8065837026E-2  2.1906599402E-2  -1.1091699824E-2  -1.8847439438E-2  -7.4316998944E-3  4.1121998802E-3  2.8898599558E-3  -2.5168000138E-4
-1.5970399836E-3  2.3255399428E-3  3.0809799209E-3  -1.7774800071E-3  -1.2604200281E-2  -2.0229380578E-2  -1.1091699824E-2  3.9556599222E-3  1.4385120012E-2  3.9556599222E-3  -1.1091699824E-2  -2.0229380578E-2  -1.2604200281E-2  -1.7774800071E-3  3.0809799209E-3  2.3255399428E-3  -1.5970399836E-3
-8.0063997302E-4  -1.3688000035E-4  3.7613599561E-3  3.1846798956E-3  -3.5306399222E-3  -1.2604200281E-2  -1.8847439438E-2  -1.7508180812E-2  -1.6485679895E-2  -1.7508180812E-2  -1.8847439438E-2  -1.2604200281E-2  -3.5306399222E-3  3.1846798956E-3  3.7613599561E-3  -1.3688000035E-4  -8.0063997302E-4
-1.2434000382E-4  5.6215998484E-4  2.1605400834E-3  3.1757799443E-3  3.1846798956E-3  -1.7774800071E-3  -7.4316998944E-3  -9.0569201857E-3  -9.6372198313E-3  -9.0569201857E-3  -7.4316998944E-3  -1.7774800071E-3  3.1846798956E-3  3.1757799443E-3  2.1605400834E-3  5.6215998484E-4  -1.2434000382E-4
-6.7714002216E-4  -5.8146001538E-4  1.4607800404E-3  2.1605400834E-3  3.7613599561E-3  3.0809799209E-3  4.1121998802E-3  2.2212199401E-3  5.5381999118E-4  2.2212199401E-3  4.1121998802E-3  3.0809799209E-3  3.7613599561E-3  2.1605400834E-3  1.4607800404E-3  -5.8146001538E-4  -6.7714002216E-4
1.2078000145E-4  4.4606000301E-4  -5.8146001538E-4  5.6215998484E-4  -1.3688000035E-4  2.3255399428E-3  2.8898599558E-3  4.2872801423E-3  5.5893999524E-3  4.2872801423E-3  2.8898599558E-3  2.3255399428E-3  -1.3688000035E-4  5.6215998484E-4  -5.8146001538E-4  4.4606000301E-4  1.2078000145E-4
-4.3500000174E-5  1.2078000145E-4  -6.7714002216E-4  -1.2434000382E-4  -8.0063997302E-4  -1.5970399836E-3  -2.5168000138E-4  -4.2019999819E-4  1.2619999470E-3  -4.2019999819E-4  -2.5168000138E-4  -1.5970399836E-3  -8.0063997302E-4  -1.2434000382E-4  -6.7714002216E-4  1.2078000145E-4  -4.3500000174E-5
];

bfilts = [...
-8.1125000725E-4  4.4451598078E-3  1.2316980399E-2  1.3955879956E-2  1.4179450460E-2  1.3955879956E-2  1.2316980399E-2  4.4451598078E-3  -8.1125000725E-4 ...
3.9103501476E-3  4.4565401040E-3  -5.8724298142E-3  -2.8760801069E-3  8.5267601535E-3  -2.8760801069E-3  -5.8724298142E-3  4.4565401040E-3  3.9103501476E-3 ...
1.3462699717E-3  -3.7740699481E-3  8.2581602037E-3  3.9442278445E-2  5.3605638444E-2  3.9442278445E-2  8.2581602037E-3  -3.7740699481E-3  1.3462699717E-3 ...
7.4700999539E-4  -3.6522001028E-4  -2.2522680461E-2  -0.1105690673      -0.1768419296      -0.1105690673      -2.2522680461E-2  -3.6522001028E-4  7.4700999539E-4 ...
0.0000000000      0.0000000000      0.0000000000      0.0000000000      0.0000000000      0.0000000000      0.0000000000      0.0000000000      0.0000000000     ...
-7.4700999539E-4  3.6522001028E-4  2.2522680461E-2  0.1105690673      0.1768419296      0.1105690673      2.2522680461E-2  3.6522001028E-4  -7.4700999539E-4 ...
-1.3462699717E-3  3.7740699481E-3  -8.2581602037E-3  -3.9442278445E-2  -5.3605638444E-2  -3.9442278445E-2  -8.2581602037E-3  3.7740699481E-3  -1.3462699717E-3 ...
-3.9103501476E-3  -4.4565401040E-3  5.8724298142E-3  2.8760801069E-3  -8.5267601535E-3  2.8760801069E-3  5.8724298142E-3  -4.4565401040E-3  -3.9103501476E-3 ...
8.1125000725E-4  -4.4451598078E-3  -1.2316980399E-2  -1.3955879956E-2  -1.4179450460E-2  -1.3955879956E-2  -1.2316980399E-2  -4.4451598078E-3  8.1125000725E-4; ...
...
0.0000000000      -8.2846998703E-4  -5.7109999034E-5  4.0110000555E-5  4.6670897864E-3  8.0871898681E-3  1.4807609841E-2  8.6204400286E-3  -3.1221499667E-3 ...
8.2846998703E-4  0.0000000000      -9.7479997203E-4  -6.9718998857E-3  -2.0865600090E-3  2.3298799060E-3  -4.4814897701E-3  1.4917500317E-2  8.6204400286E-3 ...
5.7109999034E-5  9.7479997203E-4  0.0000000000      -1.2145539746E-2  -2.4427289143E-2  5.0797060132E-2  3.2785870135E-2  -4.4814897701E-3  1.4807609841E-2 ...
-4.0110000555E-5  6.9718998857E-3  1.2145539746E-2  0.0000000000      -0.1510555595      -8.2495503128E-2  5.0797060132E-2  2.3298799060E-3  8.0871898681E-3 ...
-4.6670897864E-3  2.0865600090E-3  2.4427289143E-2  0.1510555595      0.0000000000      -0.1510555595      -2.4427289143E-2  -2.0865600090E-3  4.6670897864E-3 ...
-8.0871898681E-3  -2.3298799060E-3  -5.0797060132E-2  8.2495503128E-2  0.1510555595      0.0000000000      -1.2145539746E-2  -6.9718998857E-3  4.0110000555E-5 ...
-1.4807609841E-2  4.4814897701E-3  -3.2785870135E-2  -5.0797060132E-2  2.4427289143E-2  1.2145539746E-2  0.0000000000      -9.7479997203E-4  -5.7109999034E-5 ...
-8.6204400286E-3  -1.4917500317E-2  4.4814897701E-3  -2.3298799060E-3  2.0865600090E-3  6.9718998857E-3  9.7479997203E-4  0.0000000000      -8.2846998703E-4 ...
3.1221499667E-3  -8.6204400286E-3  -1.4807609841E-2  -8.0871898681E-3  -4.6670897864E-3  -4.0110000555E-5  5.7109999034E-5  8.2846998703E-4  0.0000000000; ...
...
8.1125000725E-4  -3.9103501476E-3  -1.3462699717E-3  -7.4700999539E-4  0.0000000000      7.4700999539E-4  1.3462699717E-3  3.9103501476E-3  -8.1125000725E-4 ...
-4.4451598078E-3  -4.4565401040E-3  3.7740699481E-3  3.6522001028E-4  0.0000000000      -3.6522001028E-4  -3.7740699481E-3  4.4565401040E-3  4.4451598078E-3 ...
-1.2316980399E-2  5.8724298142E-3  -8.2581602037E-3  2.2522680461E-2  0.0000000000      -2.2522680461E-2  8.2581602037E-3  -5.8724298142E-3  1.2316980399E-2 ...
-1.3955879956E-2  2.8760801069E-3  -3.9442278445E-2  0.1105690673      0.0000000000      -0.1105690673      3.9442278445E-2  -2.8760801069E-3  1.3955879956E-2 ...
-1.4179450460E-2  -8.5267601535E-3  -5.3605638444E-2  0.1768419296      0.0000000000      -0.1768419296     5.3605638444E-2  8.5267601535E-3  1.4179450460E-2 ...
-1.3955879956E-2  2.8760801069E-3  -3.9442278445E-2  0.1105690673      0.0000000000      -0.1105690673      3.9442278445E-2  -2.8760801069E-3  1.3955879956E-2 ...
-1.2316980399E-2  5.8724298142E-3  -8.2581602037E-3  2.2522680461E-2  0.0000000000      -2.2522680461E-2  8.2581602037E-3  -5.8724298142E-3  1.2316980399E-2 ...
-4.4451598078E-3  -4.4565401040E-3  3.7740699481E-3  3.6522001028E-4  0.0000000000      -3.6522001028E-4  -3.7740699481E-3  4.4565401040E-3  4.4451598078E-3 ...
8.1125000725E-4  -3.9103501476E-3  -1.3462699717E-3  -7.4700999539E-4  0.0000000000      7.4700999539E-4  1.3462699717E-3  3.9103501476E-3  -8.1125000725E-4; ...
...
3.1221499667E-3  -8.6204400286E-3  -1.4807609841E-2  -8.0871898681E-3  -4.6670897864E-3  -4.0110000555E-5  5.7109999034E-5  8.2846998703E-4  0.0000000000  ...   
-8.6204400286E-3  -1.4917500317E-2  4.4814897701E-3  -2.3298799060E-3  2.0865600090E-3  6.9718998857E-3  9.7479997203E-4  -0.0000000000      -8.2846998703E-4 ...
-1.4807609841E-2  4.4814897701E-3  -3.2785870135E-2  -5.0797060132E-2  2.4427289143E-2  1.2145539746E-2  0.0000000000      -9.7479997203E-4  -5.7109999034E-5 ...
-8.0871898681E-3  -2.3298799060E-3  -5.0797060132E-2  8.2495503128E-2  0.1510555595      -0.0000000000      -1.2145539746E-2  -6.9718998857E-3  4.0110000555E-5 ...
-4.6670897864E-3  2.0865600090E-3  2.4427289143E-2  0.1510555595      0.0000000000      -0.1510555595      -2.4427289143E-2  -2.0865600090E-3  4.6670897864E-3 ...
-4.0110000555E-5  6.9718998857E-3  1.2145539746E-2  0.0000000000      -0.1510555595      -8.2495503128E-2  5.0797060132E-2  2.3298799060E-3  8.0871898681E-3 ...
5.7109999034E-5  9.7479997203E-4  -0.0000000000      -1.2145539746E-2  -2.4427289143E-2  5.0797060132E-2  3.2785870135E-2  -4.4814897701E-3  1.4807609841E-2 ...
8.2846998703E-4  -0.0000000000      -9.7479997203E-4  -6.9718998857E-3  -2.0865600090E-3  2.3298799060E-3  -4.4814897701E-3  1.4917500317E-2  8.6204400286E-3 ...
0.0000000000      -8.2846998703E-4  -5.7109999034E-5  4.0110000555E-5  4.6670897864E-3  8.0871898681E-3  1.4807609841E-2  8.6204400286E-3  -3.1221499667E-3 ...
]'; 


% Steerable pyramid filters.  Transform described  in:
%
% @INPROCEEDINGS{Simoncelli95b,
%	TITLE = "The Steerable Pyramid: A Flexible Architecture for
%		 Multi-Scale Derivative Computation",
%	AUTHOR = "E P Simoncelli and W T Freeman",
%	BOOKTITLE = "Second Int'l Conf on Image Processing",
%	ADDRESS = "Washington, DC", MONTH = "October", YEAR = 1995 }
%
% Filter kernel design described in:
%
%@INPROCEEDINGS{Karasaridis96,
%	TITLE = "A Filter Design Technique for 
%		Steerable Pyramid Image Transforms",
%	AUTHOR = "A Karasaridis and E P Simoncelli",
%	BOOKTITLE = "ICASSP",	ADDRESS = "Atlanta, GA",
%	MONTH = "May",	YEAR = 1996 }

% Eero Simoncelli, 6/96.

function [lo0filt,hi0filt,lofilt,bfilts,mtx,harmonics] = sp5Filters();

harmonics = [1 3 5];

mtx = [ ...
    0.3333    0.2887    0.1667    0.0000   -0.1667   -0.2887
    0.0000    0.1667    0.2887    0.3333    0.2887    0.1667
    0.3333   -0.0000   -0.3333   -0.0000    0.3333   -0.0000
    0.0000    0.3333    0.0000   -0.3333    0.0000    0.3333
    0.3333   -0.2887    0.1667   -0.0000   -0.1667    0.2887
   -0.0000    0.1667   -0.2887    0.3333   -0.2887    0.1667];

hi0filt = [ 
-0.00033429 -0.00113093 -0.00171484 -0.00133542 -0.00080639 -0.00133542 -0.00171484 -0.00113093 -0.00033429
-0.00113093 -0.00350017 -0.00243812 0.00631653 0.01261227 0.00631653 -0.00243812 -0.00350017 -0.00113093
-0.00171484 -0.00243812 -0.00290081 -0.00673482 -0.00981051 -0.00673482 -0.00290081 -0.00243812 -0.00171484
-0.00133542 0.00631653 -0.00673482 -0.07027679 -0.11435863 -0.07027679 -0.00673482 0.00631653 -0.00133542
-0.00080639 0.01261227 -0.00981051 -0.11435863 0.81380200 -0.11435863 -0.00981051 0.01261227 -0.00080639
-0.00133542 0.00631653 -0.00673482 -0.07027679 -0.11435863 -0.07027679 -0.00673482 0.00631653 -0.00133542
-0.00171484 -0.00243812 -0.00290081 -0.00673482 -0.00981051 -0.00673482 -0.00290081 -0.00243812 -0.00171484
-0.00113093 -0.00350017 -0.00243812 0.00631653 0.01261227 0.00631653 -0.00243812 -0.00350017 -0.00113093
-0.00033429 -0.00113093 -0.00171484 -0.00133542 -0.00080639 -0.00133542 -0.00171484 -0.00113093 -0.00033429];


lo0filt = [
0.00341614 -0.01551246 -0.03848215 -0.01551246 0.00341614
-0.01551246 0.05586982 0.15925570 0.05586982 -0.01551246
-0.03848215 0.15925570 0.40304148 0.15925570 -0.03848215
-0.01551246 0.05586982 0.15925570 0.05586982 -0.01551246
0.00341614 -0.01551246 -0.03848215 -0.01551246 0.00341614];

lofilt = 2*[
0.00085404 -0.00244917 -0.00387812 -0.00944432 -0.00962054 -0.00944432 -0.00387812 -0.00244917 0.00085404
-0.00244917 -0.00523281 -0.00661117 0.00410600 0.01002988 0.00410600 -0.00661117 -0.00523281 -0.00244917
-0.00387812 -0.00661117 0.01396746 0.03277038 0.03981393 0.03277038 0.01396746 -0.00661117 -0.00387812
-0.00944432 0.00410600 0.03277038 0.06426333 0.08169618 0.06426333 0.03277038 0.00410600 -0.00944432
-0.00962054 0.01002988 0.03981393 0.08169618 0.10096540 0.08169618 0.03981393 0.01002988 -0.00962054
-0.00944432 0.00410600 0.03277038 0.06426333 0.08169618 0.06426333 0.03277038 0.00410600 -0.00944432
-0.00387812 -0.00661117 0.01396746 0.03277038 0.03981393 0.03277038 0.01396746 -0.00661117 -0.00387812
-0.00244917 -0.00523281 -0.00661117 0.00410600 0.01002988 0.00410600 -0.00661117 -0.00523281 -0.00244917
0.00085404 -0.00244917 -0.00387812 -0.00944432 -0.00962054 -0.00944432 -0.00387812 -0.00244917 0.00085404];

bfilts = [...
 0.00277643 0.00496194 0.01026699 0.01455399 0.01026699 0.00496194 0.00277643 ...
-0.00986904 -0.00893064 0.01189859 0.02755155 0.01189859 -0.00893064 -0.00986904 ...
-0.01021852 -0.03075356 -0.08226445 -0.11732297 -0.08226445 -0.03075356 -0.01021852 ...
 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 ...
 0.01021852 0.03075356 0.08226445 0.11732297 0.08226445 0.03075356 0.01021852 ...
 0.00986904 0.00893064 -0.01189859 -0.02755155 -0.01189859 0.00893064 0.00986904 ...
-0.00277643 -0.00496194 -0.01026699 -0.01455399 -0.01026699 -0.00496194 -0.00277643;
...
-0.00343249 -0.00640815 -0.00073141 0.01124321 0.00182078 0.00285723 0.01166982 ...
-0.00358461 -0.01977507 -0.04084211 -0.00228219 0.03930573 0.01161195 0.00128000 ...
 0.01047717 0.01486305 -0.04819057 -0.12227230 -0.05394139 0.00853965 -0.00459034 ...
 0.00790407 0.04435647 0.09454202 -0.00000000 -0.09454202 -0.04435647 -0.00790407 ...
 0.00459034 -0.00853965 0.05394139 0.12227230 0.04819057 -0.01486305 -0.01047717 ...
-0.00128000 -0.01161195 -0.03930573 0.00228219 0.04084211 0.01977507 0.00358461 ...
-0.01166982 -0.00285723 -0.00182078 -0.01124321 0.00073141 0.00640815 0.00343249;
...
 0.00343249 0.00358461 -0.01047717 -0.00790407 -0.00459034 0.00128000 0.01166982 ...
 0.00640815 0.01977507 -0.01486305 -0.04435647 0.00853965 0.01161195 0.00285723 ...
 0.00073141 0.04084211 0.04819057 -0.09454202 -0.05394139 0.03930573 0.00182078 ...
-0.01124321 0.00228219 0.12227230 -0.00000000 -0.12227230 -0.00228219 0.01124321 ...
-0.00182078 -0.03930573 0.05394139 0.09454202 -0.04819057 -0.04084211 -0.00073141 ...
-0.00285723 -0.01161195 -0.00853965 0.04435647 0.01486305 -0.01977507 -0.00640815 ...
-0.01166982 -0.00128000 0.00459034 0.00790407 0.01047717 -0.00358461 -0.00343249;
...
-0.00277643 0.00986904 0.01021852 -0.00000000 -0.01021852 -0.00986904 0.00277643 ...
-0.00496194 0.00893064 0.03075356 -0.00000000 -0.03075356 -0.00893064 0.00496194 ...
-0.01026699 -0.01189859 0.08226445 -0.00000000 -0.08226445 0.01189859 0.01026699 ...
-0.01455399 -0.02755155 0.11732297 -0.00000000 -0.11732297 0.02755155 0.01455399 ...
-0.01026699 -0.01189859 0.08226445 -0.00000000 -0.08226445 0.01189859 0.01026699 ...
-0.00496194 0.00893064 0.03075356 -0.00000000 -0.03075356 -0.00893064 0.00496194 ...
-0.00277643 0.00986904 0.01021852 -0.00000000 -0.01021852 -0.00986904 0.00277643;
...
-0.01166982 -0.00128000 0.00459034 0.00790407 0.01047717 -0.00358461 -0.00343249 ...
-0.00285723 -0.01161195 -0.00853965 0.04435647 0.01486305 -0.01977507 -0.00640815 ...
-0.00182078 -0.03930573 0.05394139 0.09454202 -0.04819057 -0.04084211 -0.00073141 ...
-0.01124321 0.00228219 0.12227230 -0.00000000 -0.12227230 -0.00228219 0.01124321 ...
 0.00073141 0.04084211 0.04819057 -0.09454202 -0.05394139 0.03930573 0.00182078 ...
 0.00640815 0.01977507 -0.01486305 -0.04435647 0.00853965 0.01161195 0.00285723 ...
 0.00343249 0.00358461 -0.01047717 -0.00790407 -0.00459034 0.00128000 0.01166982;
...
-0.01166982 -0.00285723 -0.00182078 -0.01124321 0.00073141 0.00640815 0.00343249 ...
-0.00128000 -0.01161195 -0.03930573 0.00228219 0.04084211 0.01977507 0.00358461 ...
 0.00459034 -0.00853965 0.05394139 0.12227230 0.04819057 -0.01486305 -0.01047717 ...
 0.00790407 0.04435647 0.09454202 -0.00000000 -0.09454202 -0.04435647 -0.00790407 ...
 0.01047717 0.01486305 -0.04819057 -0.12227230 -0.05394139 0.00853965 -0.00459034 ...
-0.00358461 -0.01977507 -0.04084211 -0.00228219 0.03930573 0.01161195 0.00128000 ...
-0.00343249 -0.00640815 -0.00073141 0.01124321 0.00182078 0.00285723 0.01166982]'; 


% HEIGHT = maxPyrHt(IMSIZE, FILTSIZE)
%
% Compute maximum pyramid height for given image and filter sizes.
% Specifically: the number of corrDn operations that can be sequentially
% performed when subsampling by a factor of 2.

% Eero Simoncelli, 6/96.

function height = maxPyrHt(imsz, filtsz)

imsz = imsz(:);
filtsz = filtsz(:);

if any(imsz == 1) % 1D image
  imsz = prod(imsz);
  filtsz = prod(filtsz);
elseif any(filtsz == 1)              % 2D image, 1D filter
  filtsz = [filtsz(1); filtsz(1)];
end

if any(imsz < filtsz)
  height = 0;
else
  height = 1 + maxPyrHt( floor(imsz/2), filtsz ); 
end



% RES = corrDn(IM, FILT, EDGES, STEP, START, STOP)
%
% Compute correlation of matrices IM with FILT, followed by
% downsampling.  These arguments should be 1D or 2D matrices, and IM
% must be larger (in both dimensions) than FILT.  The origin of filt
% is assumed to be floor(size(filt)/2)+1.
% 
% EDGES is a string determining boundary handling:
%    'circular' - Circular convolution
%    'reflect1' - Reflect about the edge pixels
%    'reflect2' - Reflect, doubling the edge pixels
%    'repeat'   - Repeat the edge pixels
%    'zero'     - Assume values of zero outside image boundary
%    'extend'   - Reflect and invert
%    'dont-compute' - Zero output when filter overhangs input boundaries
%
% Downsampling factors are determined by STEP (optional, default=[1 1]), 
% which should be a 2-vector [y,x].
% 
% The window over which the convolution occurs is specfied by START 
% (optional, default=[1,1], and STOP (optional, default=size(IM)).
% 
% NOTE: this operation corresponds to multiplication of a signal
% vector by a matrix whose rows contain copies of the FILT shifted by
% multiples of STEP.  See upConv.m for the operation corresponding to
% the transpose of this matrix.

% Eero Simoncelli, 6/96, revised 2/97.

function res = corrDn(im, filt, edges, step, start, stop)

%% NOTE: THIS CODE IS NOT ACTUALLY USED! (MEX FILE IS CALLED INSTEAD)

% fprintf(1,'WARNING: You should compile the MEX version of "corrDn.c",\n         found in the MEX subdirectory of matlabPyrTools, and put it in your matlab path.  It is MUCH faster, and provides more boundary-handling options.\n');

%------------------------------------------------------------
%% OPTIONAL ARGS:

if (exist('edges') == 1) 
  if (strcmp(edges,'reflect1') ~= 1)
    warning('Using REFLECT1 edge-handling (use MEX code for other options).');
  end
end

if (exist('step') ~= 1)
	step = [1,1];
end	

if (exist('start') ~= 1)
	start = [1,1];
end	

if (exist('stop') ~= 1)
	stop = size(im);
end	

%------------------------------------------------------------

% Reverse order of taps in filt, to do correlation instead of convolution
filt = filt(size(filt,1):-1:1,size(filt,2):-1:1);

tmp = rconv2(im,filt);
res = tmp(start(1):step(1):stop(1),start(2):step(2):stop(2));


% RES = RCONV2(MTX1, MTX2, CTR)
%
% Convolution of two matrices, with boundaries handled via reflection
% about the edge pixels.  Result will be of size of LARGER matrix.
% 
% The origin of the smaller matrix is assumed to be its center.
% For even dimensions, the origin is determined by the CTR (optional) 
% argument:
%      CTR   origin
%       0     DIM/2      (default)
%       1     (DIM/2)+1  

% Eero Simoncelli, 6/96.

function c = rconv2(a,b,ctr)

if (exist('ctr') ~= 1)
  ctr = 0;
end

if (( size(a,1) >= size(b,1) ) & ( size(a,2) >= size(b,2) ))
    large = a; small = b;
elseif  (( size(a,1) <= size(b,1) ) & ( size(a,2) <= size(b,2) ))
    large = b; small = a;
else
  error('one arg must be larger than the other in both dimensions!');
end

ly = size(large,1);
lx = size(large,2);
sy = size(small,1);
sx = size(small,2);

%% These values are one less than the index of the small mtx that falls on 
%% the border pixel of the large matrix when computing the first 
%% convolution response sample:
sy2 = floor((sy+ctr-1)/2);
sx2 = floor((sx+ctr-1)/2);

% pad with reflected copies
clarge = [ 
    large(sy-sy2:-1:2,sx-sx2:-1:2), large(sy-sy2:-1:2,:), ...
	large(sy-sy2:-1:2,lx-1:-1:lx-sx2); ...
    large(:,sx-sx2:-1:2),    large,   large(:,lx-1:-1:lx-sx2); ...
    large(ly-1:-1:ly-sy2,sx-sx2:-1:2), ...
      large(ly-1:-1:ly-sy2,:), ...
      large(ly-1:-1:ly-sy2,lx-1:-1:lx-sx2) ];

c = conv2(clarge,small,'valid');


% [PYR, INDICES] = buildSpyrLevs(LOIM, HEIGHT, LOFILT, BFILTS, EDGES)
%
% Recursive function for constructing levels of a steerable pyramid.  This
% is called by buildSpyr, and is not usually called directly.

% Eero Simoncelli, 6/96.

function [pyr,pind] = buildSpyrLevs(lo0,ht,lofilt,bfilts,edges);

if (ht <= 0)

  pyr = lo0(:);
  pind = size(lo0);

else

  % Assume square filters:
  bfiltsz =  round(sqrt(size(bfilts,1)));

  bands = zeros(prod(size(lo0)),size(bfilts,2));
  bind = zeros(size(bfilts,2),2);

  for b = 1:size(bfilts,2)
    filt = reshape(bfilts(:,b),bfiltsz,bfiltsz);
    band = corrDn(lo0, filt, edges);
    bands(:,b) = band(:);
    bind(b,:)  = size(band);
  end
	
  lo = corrDn(lo0, lofilt, edges, [2 2], [1 1]);
  
  [npyr,nind] = buildSpyrLevs(lo, ht-1, lofilt, bfilts, edges);

  pyr = [bands(:); npyr];
  pind = [bind; nind];
	
end


% RES = pyrBandIndices(INDICES, BAND_NUM)
%
% Return indices for accessing a subband from a pyramid 
% (gaussian, laplacian, QMF/wavelet, steerable).

% Eero Simoncelli, 6/96.

function indices =  pyrBandIndices(pind,band)

if ((band > size(pind,1)) | (band < 1))
  error(sprintf('BAND_NUM must be between 1 and number of pyramid bands (%d).', ...
      size(pind,1)));
end

if (size(pind,2) ~= 2)
  error('INDICES must be an Nx2 matrix indicating the size of the pyramid subbands');
end

ind = 1;
for l=1:band-1
  ind = ind + prod(pind(l,:));
end

indices = ind:ind+prod(pind(band,:))-1;


% RES = reconSpyr(PYR, INDICES, FILTFILE, EDGES, LEVS, BANDS)
%
% Reconstruct image from its steerable pyramid representation, as created
% by buildSpyr.
%
% PYR is a vector containing the N pyramid subbands, ordered from fine
% to coarse.  INDICES is an Nx2 matrix containing the sizes of
% each subband.  This is compatible with the MatLab Wavelet toolbox.
%
% FILTFILE (optional) should be a string referring to an m-file that returns
% the rfilters.  examples: sp0Filters, sp1Filters, sp3Filters 
% (default = 'sp1Filters'). 
% EDGES specifies edge-handling, and defaults to 'reflect1' (see
% corrDn).
% 
% LEVS (optional) should be a list of levels to include, or the string
% 'all' (default).  0 corresonds to the residual highpass subband.  
% 1 corresponds to the finest oriented scale.  The lowpass band
% corresponds to number spyrHt(INDICES)+1.
%
% BANDS (optional) should be a list of bands to include, or the string
% 'all' (default).  1 = vertical, rest proceeding anti-clockwise.

% Eero Simoncelli, 6/96.

function res = reconSpyr(pyr, pind, filtfile, edges, levs, bands)

%%------------------------------------------------------------
%% DEFAULTS:

if (exist('filtfile') ~= 1)
  filtfile = 'sp1Filters';
end

if (exist('edges') ~= 1)
  edges= 'reflect1';
end

if (exist('levs') ~= 1)
  levs = 'all';
end

if (exist('bands') ~= 1)
  bands = 'all';
end

%%------------------------------------------------------------

if (isstr(filtfile) & (exist(filtfile) == 2))
   [lo0filt,hi0filt,lofilt,bfilts,steermtx,harmonics] = eval(filtfile);
   nbands = spyrNumBands(pind);
   if ((nbands > 0) & (size(bfilts,2) ~= nbands))
     error('Number of pyramid bands is inconsistent with filter file');
   end
else
  error('filtfile argument must be the name of an M-file containing SPYR filters.');
end

maxLev =  1+spyrHt(pind);
if strcmp(levs,'all')
  levs = [0:maxLev]';
else
  if (any(levs > maxLev) | any(levs < 0))
    error(sprintf('Level numbers must be in the range [0, %d].', maxLev));
  end
  levs = levs(:);
end

if strcmp(bands,'all')
  bands = [1:nbands]';
else
  if (any(bands < 1) | any(bands > nbands))
    error(sprintf('Band numbers must be in the range [1,3].', nbands));
  end
  bands = bands(:);
end

if (spyrHt(pind) == 0)
  if (any(levs==1))
    res1 = pyrBand(pyr,pind,2);
  else
    res1 = zeros(pind(2,:));
  end
else
  res1 = reconSpyrLevs(pyr(1+prod(pind(1,:)):size(pyr,1)), ...
      pind(2:size(pind,1),:), ...
      lofilt, bfilts, edges, levs, bands);
end

res = upConv(res1, lo0filt, edges);

%% residual highpass subband
if any(levs == 0)
   upConv( subMtx(pyr, pind(1,:)), hi0filt, edges, [1 1], [1 1], size(res), res);
end
 


% [NBANDS] = spyrNumBands(INDICES)
%
% Compute number of orientation bands in a steerable pyramid with
% given index matrix.  If the pyramid contains only the highpass and
% lowpass bands (i.e., zero levels), returns 0.

% Eero Simoncelli, 2/97.

function [nbands] =  spyrNumBands(pind)

if (size(pind,1) == 2)
  nbands  = 0;
else
  % Count number of orientation bands:
  b = 3;
  while ((b <= size(pind,1)) & all( pind(b,:) == pind(2,:)) )
    b = b+1;
  end
  nbands = b-2;
end

% [HEIGHT] = spyrHt(INDICES)
%
% Compute height of steerable pyramid with given index matrix.

% Eero Simoncelli, 6/96.

function [ht] =  spyrHt(pind)

nbands = spyrNumBands(pind);

% Don't count lowpass, or highpass residual bands
if (size(pind,1) > 2)
  ht = (size(pind,1)-2)/nbands;
else
  ht = 0;
end


% RES = reconSpyrLevs(PYR,INDICES,LOFILT,BFILTS,EDGES,LEVS,BANDS)
%
% Recursive function for reconstructing levels of a steerable pyramid
% representation.  This is called by reconSpyr, and is not usually
% called directly.

% Eero Simoncelli, 6/96.

function res = reconSpyrLevs(pyr,pind,lofilt,bfilts,edges,levs,bands);

nbands = size(bfilts,2);
lo_ind = nbands+1;
res_sz = pind(1,:);

% Assume square filters:
bfiltsz =  round(sqrt(size(bfilts,1)));

if any(levs > 1)

  if  (size(pind,1) > lo_ind)
    nres = reconSpyrLevs( pyr(1+sum(prod(pind(1:lo_ind-1,:)')):size(pyr,1)),  ...
	pind(lo_ind:size(pind,1),:), ...
	lofilt, bfilts, edges, levs-1, bands);
  else
    nres = pyrBand(pyr,pind,lo_ind); 	% lowpass subband
  end

  res = upConv(nres, lofilt, edges, [2 2], [1 1], res_sz);

else

  res = zeros(res_sz);

end
	
if any(levs == 1)
  ind = 1;
  for b = 1:nbands
    if any(bands == b)
      bfilt = reshape(bfilts(:,b), bfiltsz, bfiltsz);
      upConv(reshape(pyr(ind:ind+prod(res_sz)-1), res_sz(1), res_sz(2)), ...
		  bfilt, edges, [1 1], [1 1], res_sz, res);
    end
    ind = ind + prod(res_sz);
  end
end


% RES = pyrBand(PYR, INDICES, BAND_NUM)
%
% Access a subband from a pyramid (gaussian, laplacian, QMF/wavelet, 
% or steerable).  Subbands are numbered consecutively, from finest
% (highest spatial frequency) to coarsest (lowest spatial frequency).

% Eero Simoncelli, 6/96.

function res =  pyrBand(pyr, pind, band)

res = reshape( pyr(pyrBandIndices(pind,band)), pind(band,1), pind(band,2) );


% RES = upConv(IM, FILT, EDGES, STEP, START, STOP, RES)
%
% Upsample matrix IM, followed by convolution with matrix FILT.  These
% arguments should be 1D or 2D matrices, and IM must be larger (in
% both dimensions) than FILT.  The origin of filt
% is assumed to be floor(size(filt)/2)+1.
%
% EDGES is a string determining boundary handling:
%    'circular' - Circular convolution
%    'reflect1' - Reflect about the edge pixels
%    'reflect2' - Reflect, doubling the edge pixels
%    'repeat'   - Repeat the edge pixels
%    'zero'     - Assume values of zero outside image boundary
%    'extend'   - Reflect and invert
%    'dont-compute' - Zero output when filter overhangs OUTPUT boundaries
%
% Upsampling factors are determined by STEP (optional, default=[1 1]),
% a 2-vector [y,x].
% 
% The window over which the convolution occurs is specfied by START 
% (optional, default=[1,1], and STOP (optional, default = 
% step .* (size(IM) + floor((start-1)./step))).
%
% RES is an optional result matrix.  The convolution result will be 
% destructively added into this matrix.  If this argument is passed, the 
% result matrix will not be returned. DO NOT USE THIS ARGUMENT IF 
% YOU DO NOT UNDERSTAND WHAT THIS MEANS!!
% 
% NOTE: this operation corresponds to multiplication of a signal
% vector by a matrix whose columns contain copies of the time-reversed
% (or space-reversed) FILT shifted by multiples of STEP.  See corrDn.m
% for the operation corresponding to the transpose of this matrix.

% Eero Simoncelli, 6/96.  revised 2/97.

function result = OLD_upConv(im,filt,edges,step,start,stop,res)

%% THIS CODE IS NOT ACTUALLY USED! (MEX FILE IS CALLED INSTEAD)

fprintf(1,'WARNING: You should compile the MEX version of "upConv.c",\n         found in the MEX subdirectory of matlabPyrTools, and put it in your matlab path.  It is MUCH faster, and provides more boundary-handling options.\n');

%------------------------------------------------------------
%% OPTIONAL ARGS:

if (exist('edges') == 1) 
  if (strcmp(edges,'reflect1') ~= 1)
    warning('Using REFLECT1 edge-handling (use MEX code for other options).');
  end
end

if (exist('step') ~= 1)
  step = [1,1];
end	

if (exist('start') ~= 1)
  start = [1,1];
end	

% A multiple of step
if (exist('stop') ~= 1)
  stop = step .* (floor((start-ones(size(start)))./step)+size(im));
end	

if ( ceil((stop(1)+1-start(1)) / step(1)) ~= size(im,1) )
  error('Bad Y result dimension');
end
if ( ceil((stop(2)+1-start(2)) / step(2)) ~= size(im,2) )
  error('Bad X result dimension');
end

if (exist('res') ~= 1)
  res = zeros(stop-start+1);
end	

%------------------------------------------------------------

tmp = zeros(size(res));
tmp(start(1):step(1):stop(1),start(2):step(2):stop(2)) = im;

result = rconv2(tmp,filt) + res;


% MTX = subMtx(VEC, DIMENSIONS, START_INDEX)
%
% Reshape a portion of VEC starting from START_INDEX (optional,
% default=1) to the given dimensions.

% Eero Simoncelli, 6/96.

function mtx = subMtx(vec, sz, offset)

if (exist('offset') ~= 1)
   offset = 1;
end

vec = vec(:);
sz = sz(:);

if (size(sz,1) ~= 2)
  error('DIMENSIONS must be a 2-vector.');
end

mtx = reshape( vec(offset:offset+prod(sz)-1), sz(1), sz(2) );

