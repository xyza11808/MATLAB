% ficurve: script which plots the firing frequency of a model neuron for
% different values of an input parameter, such as constant current. 
%
% The script tests whether the following workspace variables are defined
%
%	  modname = name of the simulink model to use (quoted string)
%	  param = name of the input parameter to be varied (quoted
%	          string)
%	  spkvar = name of the model output variable for the spike train
%	        (quoted string)
%	  values = vector of values to be used for param
%	  tstop = end time for the simulated model
%	  tstep = simulation time step
%  
%  If any of these variables is not defined, the script asks for their
%  values. The script then simulates the model 'modname' from time equal
%  to zero up to tstop and  with values of  'param' taken from the array 
%  'values'. Finally, the script plots the mean firing frequency of
%  the model as a function of the parameter values. The default values
%  for the title of the plot and for the axis labels can be overridden
%  by setting the string variables titlestr, xlabelstr, ylabelstr,
%  respectively. 
%
%


%checks that the model and variables are defined and correctly set
if ( exist('modname') ~= 1)
  disp(' ');
  modname = input('please enter the name of a simulink model to be used: ','s');
  disp(' ');
end;
if ( ~isstr(modname) )
  disp(' ');
  disp('error: modname is expected to be a string variable');
  disp(' ');
  return;
end; 
if ( ~(exist(modname) ==2 | exist(modname) == 4) )
  errstr = sprintf('error: the function %s was not found',modname);
  disp(' '); 
  disp(errstr);
  disp(' ');
  return;
end;
if ( exist('spkvar') ~= 1 )
  disp(' ');
  disp('please enter the name of the output variable containing the spike');  
  spkvar = input('train generated by the model: ','s');
  disp(' ');
end;
if ( ~isstr(spkvar) )
  disp(' ');
  disp('error: spkvar is expected to be a string variable');
  disp(' ');
  return;
end; 
if ( exist('param') ~= 1 )
  disp(' ');
  param = input('please enter the name of the parameter to be varied: ','s');
  disp(' ');
end;
if ( ~isstr(param) )
  disp(' ');
  disp('error: param is expected to be a string variable');
  disp(' ');
  return;
end;
if ( exist('tstop') ~= 1)
  disp(' ');
  tstop = input('please enter the end value for the simulation time: ');
  disp(' ');
end;
if ( ~(tstop > 0 ) ) 
  disp(' ');
  disp('error: tstop must be greater than zero');
  disp(' ');
  return;
end;
if ( exist('tstep') ~= 1)
  disp(' ');
  tstep = input('please enter the time step for the simulation: ');
  disp(' ');
end;
if ( ~(tstep > 0 ) ) 
  disp(' ');
  disp('error: tstep must be greater than zero');
  disp(' ');
  return;
end;
if ( ~exist('values') )
  valstr = sprintf('the vector of values for %s does not exist',param);
  disp(valstr);
  values = input('please input a vector of values: ');
end;
values = values(:);
ppsize = length(values);

%sets up all the options and clears variables for simulation
options = simset('Solver','FixedStepDiscrete','FixedStep',tstep);
eval(sprintf('clear %s',spkvar));
meanfiring = zeros(1,ppsize);

for i=1:ppsize
  setpstr = sprintf('%s = %g;',param,values(i,1));
  eval(setpstr);
  annstr=sprintf('simulating %s with %s=%g ...',modname,param,values(i,1));
  disp(' ');
  disp(annstr);
  execstr = sprintf('sim(''%s'',tstop,options,[]);',modname);
  eval(execstr);
  disp('done.');
  disp(' ');
  test = eval(sprintf('~(exist(''%s'')==1)',spkvar));
  if test
    errstr = sprintf('error: the variable %s was not created during simulation',spkvar);
    disp(errstr);
    return;
  end;
  totspk = eval(sprintf('sum(%s)',spkvar));
  meanfiring(1,i) = totspk/(tstop*1e-3); %converts to from msec to sec
end;

%looks if the figure 'ficurve' already exists, otherwise creates one
%and sets it to current
fig_name = 'ficurve';
Figures = get(0,'Chil');
new_fig = 1;
for i=1:length(Figures)
  if strcmp(get(Figures(i),'Type'),'figure')
    if strcmp(get(Figures(i),'Name'),fig_name)
      new_fig = 0;
      h_fig = Figures(i);
      set(0,'CurrentFigure',h_fig);
    end;
  end;
end;
if (new_fig == 1)
  h_fig = figure('Name',fig_name);
end;

%sets decorations and plots the isi distribution
plot(values,meanfiring,'y--',values,meanfiring,'go');
if ( exist('titlestr')~=1 )
  title('F-I curve');
else
  title(titlestr);
end;
if ( exist('xlabelstr')~=1 )
  xlabel('current [nA]');
else
  xlabel(xlabelstr);
end;
if ( exist('ylabelstr')~=1 )
  ylabel('mean firing frequency [Hz]');
else
  ylabel(ylabelstr);
end;
xlim = get(gca,'XLim');
ylim = get(gca,'YLim');
timet = sprintf('simulation time = %.3g [msec]',tstop);
timex = xlim(1,1) + 0.1 * (xlim(1,2)-xlim(1,1));
timey = ylim(1,2) - 0.05 * (ylim(1,2)-ylim(1,1));
text(timex,timey,timet);


%clears variables before exiting
clear h_fig Figures fig_name psize ppsize meanfiring setpstr annstr
clear execstr new_fig totspk test errstr options  valstr xlim ylim
clear timet timex timey