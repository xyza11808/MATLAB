% stestf: script which plots the coding fraction for model neurons
% as function of the mean firing frequency per model. Different
% values of the firing frequency are obtained by changing the gain
% at the input of the  neuron model. 
%
% The script tests whether the following workspace variables are defined
%
%	  modname = name of the simulink model to use (quoted string)
%	  param = name of the input parameter to be varied (quoted
%	          string)
%	  spkvar = name of the model output variable for the spike trains 
%	  values = vector of values to be used for param
%	  tstop = end time for the simulated model
%	  tstep = simulation time step
%	  nvar = subsampling applied during stimulus estimation
%  
%  If any of these variables is not defined, the script asks for their
%  values. The script then simulates the model 'modname' from time equal
%  to zero up to tstop and  with values of  'param' taken from the array 
%  'values'. The stimulus is then estimated from the spike trains
%  after subsampling. Finally, the script plots the coding fraction as a
%  function of the  mean firing frequency per model neuron. The default values 
%  for the title of the plot and for the axis labels can be overridden
%  by setting the string variables titlestr, xlabelstr, ylabelstr,
%  respectively. The mean firing frequency and coding fraction are
%  returned in two arrays meanfiring and meancf, respectively. 
%
%


%checks that the model and variables are defined and correctly set
if ( exist('modname') ~= 1)
  disp(' ');
  modname = input('please enter the name of a simulink model to be used: ','s');
  disp(' ');
end;
if ( ~isstr(modname) )
  disp(' ');
  disp('error: modname is expected to be a quoted string');
  disp(' ');
  return;
end; 
if ( ~(exist(modname) ==2 | exist(modname) == 4) )
  errstr = sprintf('error: the function %s was not found',modname);
  disp(' '); 
  disp(errstr);
  disp(' ');
  return;
end;
if ( exist('stimvar') ~= 1 )
  disp(' ');
  disp('please enter the name of the output variable containing the');  
  stimvar = input('stimulus: ','s');
  disp(' ');
end;
if ( ~isstr(stimvar) )
  disp(' ');
  disp('error: stimvar is expected to be a quoted string');
  disp(' ');
  return;
end; 
if ( exist('spkvar') ~= 1 )
  disp(' ');
  disp('please enter the name of the output variable containing the');  
  spkvar = input('spike trains generated by the model: ','s');
  disp(' ');
end;
if ( ~isstr(spkvar) )
  disp(' ');
  disp('error: spkvar is expected to be a quoted string');
  disp(' ');
  return;
end; 
if ( exist('param') ~= 1 )
  disp(' ');
  param = input('please enter the name of the parameter to be varied: ','s');
  disp(' ');
end;
if ( ~isstr(param) )
  disp(' ');
  disp('error: param is expected to be a quoted string');
  disp(' ');
  return;
end;
if ( exist('nvar') ~= 1 )
  disp('please enter the resampling to be ');
  nvar = input('performed for stimulus estimation: ');
  disp(' ');
end;
if ( ~(nvar > 0) )
  disp(' ');
  disp('error: nvar is expected to be a positive integer');
  disp(' ');
  return;
end;
if ( exist('tstop') ~= 1)
  disp(' ');
  tstop = input('please enter the end value for the simulation time: ');
  disp(' ');
end;
if ( ~(tstop > 0 ) ) 
  disp(' ');
  disp('error: tstop must be greater than zero');
  disp(' ');
  return;
end;
if ( exist('tstep') ~= 1)
  disp(' ');
  tstep = input('please enter the time step for the simulation: ');
  disp(' ');
end;
if ( ~(tstep > 0 ) ) 
  disp(' ');
  disp('error: tstep must be greater than zero');
  disp(' ');
  return;
end;
if ( ~exist('values') )
  valstr = sprintf('the vector of values for %s does not exist',param);
  disp(valstr);
  values = input('please input a vector of values: ');
end;
values = values(:);

%sets up all the options and clears variables for simulation
options = [ 1e-3 tstep tstep 0 0 2 ];
eval(sprintf('clear %s %s',spkvar,stimvar));
meanfiring = zeros(1,length(values));

for i=1:length(values)
  eval(sprintf('clear %s %s;',stimvar,spkvar));
  setpstr = sprintf('%s = %g;',param,values(i,1));
  eval(setpstr);
  annstr=sprintf('simulating %s with %s=%g ...',modname,param,values(i,1));
  disp(' ');
  disp(annstr);
  execstr = sprintf('rk45(''%s'',tstop,[],options);',modname);
  eval(execstr);
  disp('done.');
  disp(' ');
  test = eval(sprintf('~( exist(''%s'')==1 )',spkvar));
  if test
    s1 = sprintf('error:the variables %s  was',spkvar);
    s2 = sprintf('not created during simulation');
    disp(s1);
    disp(s2);
    return;
  end;
  test = eval(sprintf('~( exist(''%s'')==1 )',stimvar));
  if test
    s1 = sprintf('error:the variables %s  was',stimvar);
    s2 = sprintf('not created during simulation');
    disp(s1);
    disp(s2);
    return;
  end;
  meanspk = eval(sprintf('mean(abs(%s))',spkvar));
  meanfiring(1,i) = meanspk/(2*tstep*1e-3)
  % converts from msec to sec
  % and averages over the two spike trains 
  % to obtain the firing rate per neuron model

  % resamples the stimulus
  eval(sprintf('int_stim = resample(%s,1,%i);',stimvar,nvar));
  l_int_stim = length(int_stim);
  eval(sprintf('%s = int_stim;',stimvar));
  clear int_stim;

  % resamples the spike train
  int_spk = zeros(l_int_stim,1);
  for k = 1:length(int_spk)
    int_spk(k,1) = sum(spk((k-1)*nvar+1:k*nvar,1));
  end;
  eval(sprintf('%s = int_spk;',spkvar));
  clear int_spk;

  % performs the stimulus estimation
  eval(sprintf('[h, tvect, cf] = stimest(%s,%s,nvar*tstep);',stimvar,spkvar));
  meancf(1,i) = cf
end; 

%looks if the figure 'stestf' already exists, otherwise creates one
%and sets it to current
fig_name = 'stestf';
Figures = get(0,'Chil');
new_fig = 1;
for i=1:length(Figures)
  if strcmp(get(Figures(i),'Type'),'figure')
    if strcmp(get(Figures(i),'Name'),fig_name)
      new_fig = 0;
      h_fig = Figures(i);
      set(0,'CurrentFigure',h_fig);
    end;
  end;
end;
if (new_fig == 1)
  h_fig = figure('Name',fig_name);
end;

%sets decorations and plots the isi distribution
plot(meanfiring,meancf,'xg',meanfiring,meancf,'y--');
if ( exist('titlestr')~=1 )
  title('Coding fraction vs. mean rate curve');
else
  title(titlestr);
end;
if ( exist('xlabelstr')~=1 )
  xlabel('mean firing rate [Hz]');
else
  xlabel(xlabelstr);
end;
if ( exist('ylabelstr')~=1 )
  ylabel('coding fraction [normalized units]');
else
  ylabel(ylabelstr);
end;

%clears variables before exiting
clear h tvect cf
clear h_fig Figures fig_name meanspk setpstr annstr
clear execstr new_fig totspk test errstr options  valstr xlim ylim
clear timet timex timey i  l_int_stim
%clear meanfiring meancf