function [t, pd] = gfitheor(c,thres,ord,i,ref,res,maxt,dt)
% gfitheor: function which returns the theoretical isi distribution of
% a gamma I&F neuron in response to a constant current pulse (i.e.,
% the isi distribution of  a gamma distributed renewal process). 
% The same discretization is used as when the isi is generated by
% simulating a gamma I&F neuron with time step dt. If called without
% output arguments, the function plots the isi distribution. 
%
%	[t, pd] = gfitheor(c,thres,n,i,ref,res,maxt,dt)
%
%	where 
%	  c = capacity of the model neuron (nF)
%	  thres = threshold (mV)
%	  ord = order of the gamma distribution
%	  i = constant input current (nA)
%	  ref = refractory period (msec)
%	  res = resolution of the isi (msec)
%	  maxt = maximal time interval to be taken into account (msec)
%	  dt = discretization time step (msec)
%
%	res is expected to be a multiple of dt and will be
%	rounded down to the nearest multiple if not. 
%
% The return parameters are:
%
%	t = vector of time values for the ISIs.
%	pd = corresponding probability distribution.
%

if ( nargin ~= 8 )
  disp(' ');
  disp('usage: gfitheor(c,thres,ord,i,ref,res,maxt,dt) ');
  disp('       for more information type "help gfitheor" in the main');
  disp('       matlab window');
  disp(' ');
  return;
end;

%initializes the various variables
n_conv = floor(res/dt);
true_res = dt*n_conv;
n = ceil(maxt/true_res) + 1;
isi_x = (0:true_res:n*true_res)';
isi_y =zeros(n+1,1);
dtisi_x = (0:dt:n*true_res)';
size = length(dtisi_x);
dtisi_y = zeros(size,1);
mean = c*thres/i;

dtisi_y(1,1) = 0;
dtisi_y(2,1) = 0;
for i=3:size
  dtisi_y(i,1) = (ord/mean)*(1/gamma(ord))*((ord*(dtisi_x(i,1)-dt)/mean)^(ord-1)) ...
                 * exp(-ord*(dtisi_x(i,1)-dt)/mean); 
end;

%takes into account the refractory period
n_ref = max(0,ceil(ref/dt)-1);
for i=size:-1:n_ref+1
  dtisi_y(i,1) = dtisi_y(i-n_ref,1);
end;

for i = 3:n_ref
  dtisi_y(i,1) = 0;
end;

for i=2:size
  isi_bin = round( (i-1)/n_conv) + 1;
  isi_y(isi_bin,1) = isi_y(isi_bin,1) + dtisi_y(i,1);
end;

sm = sum(isi_y);
isi_y = isi_y/sm; %probablility per bin 

if ( nargout == 0 )
%looks for the figure 'isidist', otherwise creates it
%and sets it to current
  fig_name = 'isidist';
  Figures = get(0,'Chil');
  new_fig = 1;
  for i=1:length(Figures)
    if strcmp(get(Figures(i),'Type'),'figure')
      if strcmp(get(Figures(i),'Name'),fig_name)
        new_fig = 0;
        h_fig = Figures(i);
        set(0,'CurrentFigure',h_fig);
      end;
    end;
  end;
  if (new_fig == 1)
    h_fig = figure('Name',fig_name);
  end;

%sets decorations and plots the isi distribution
  plot(isi_x,isi_y,'g');
  title('Interspike interval distribution');
  xlabel('interspike interval [msec]');
  ylabel('probability per bin');
end;

if ( nargout == 2 )
  t = isi_x;
  pd = isi_y;
end;

